From 000b6934c4679e1415e6c481bd98650fc2a6a0b7 Mon Sep 17 00:00:00 2001
From: Marcello Seri <marcello.seri@citrix.com>
Date: Fri, 16 Mar 2018 12:37:03 +0000
Subject: [PATCH 1/2] Update the code to be safe-string compatible

Signed-off-by: Marcello Seri <marcello.seri@citrix.com>
---
 lib/ring.ml      | 8 ++++----
 lib_test/test.ml | 6 +++---
 2 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/lib/ring.ml b/lib/ring.ml
index 9ce336c..0748929 100644
--- a/lib/ring.ml
+++ b/lib/ring.ml
@@ -138,9 +138,9 @@ module Common(Log: S.LOG)(B: S.BLOCK) = struct
     let open Lwt_read_error in
     (* check for magic, initialise if not found *)
     B.read device sector_signature [ sector ] >>= fun () ->
-    let magic' = String.make (String.length magic) '\000' in
-    Cstruct.blit_to_string sector 0 magic' 0 (String.length magic');
-    return (magic = magic')
+    let magic' = Bytes.make (String.length magic) '\000' in
+    Cstruct.blit_to_bytes sector 0 magic' 0 (Bytes.length magic');
+    return (Bytes.unsafe_to_string magic' = magic)
 
   let create device info sector =
     let open ResultM in
@@ -351,7 +351,7 @@ module Producer = struct
   let unsafe_write (t:t) item =
     let open C in
     let open ResultM in
-    let sector = alloc t.info.Mirage_block.sector_size in
+    let _sector = alloc t.info.Mirage_block.sector_size in
     (* add a 4 byte header of size, and round up to the next 4-byte offset *)
     let needed_bytes = Int64.(logand (lognot 3L) (add 7L (of_int (Cstruct.len item)))) in
     let first_sector = Int64.(div t.producer.producer (of_int t.info.Mirage_block.sector_size)) in
diff --git a/lib_test/test.ml b/lib_test/test.ml
index 6b29431..411b428 100644
--- a/lib_test/test.ml
+++ b/lib_test/test.ml
@@ -109,7 +109,7 @@ let test_push_pop length batch () =
     >>= fun name ->
 
     let payload = "All work and no play makes Dave a dull boy.\n" in
-    let toobig = String.create Int64.(to_int size) in
+    let toobig = Bytes.create Int64.(to_int size) in
     Block.connect name >>= fun disk ->
     let open Lwt_result in
     Producer.create ~disk () >>= fun () ->
@@ -136,7 +136,7 @@ let test_push_pop length batch () =
         let rec push = function
         | 0 -> return ()
         | m ->
-          Producer.push ~t:producer ~item:toobig () >>= fun r ->
+          Producer.push ~t:producer ~item:(Bytes.unsafe_to_string toobig) () >>= fun r ->
           ignore(get_error r);
           Producer.push ~t:producer ~item:payload () >>= fun r ->
           let position = get_ok r in
@@ -291,7 +291,7 @@ let test_journal () =
     let open Lwt in
     w.J.sync ()
     >>= fun () ->
-    J.push j (String.create (Int64.to_int size))
+    J.push j (Bytes.unsafe_to_string @@ Bytes.create (Int64.to_int size))
     >>= fun t ->
     ignore(get_error t);
     J.shutdown j
-- 
2.14.3

